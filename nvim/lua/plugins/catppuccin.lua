local ivory     = "#dce0e8"
---@diagnostic disable-next-line: unused-local
local spark     = "#add8e6"

local noita     = {
        mocha = {
                --[[
                rosewater = "#",
                flamingo  = "#",
                pink      = "#",
                mauve     = "#",
                red    = "#cb341b",
                maroon = "#d17678",
                peach     = "#",
                yellow    = "#",
                green     = "#",
                teal      = "#",
                sky       = "#",
                sapphire  = "#",
                blue      = "#",
                lavender  = "#",
                text      = "#",
                subtext1  = "#",
                subtext0  = "#",
                overlay2  = "#",
                overlay1  = "#",
                overlay0  = "#",
                surface2  = "#",
                surface1  = "#",
                surface0  = "#",
                base      = "#",
                mantle    = "#",
                crust  = "#211a25",
                --]]
        },
}

local customCol = function(C)
        return {

                --------------------------------------------------------------------------------------------------------
                -- BUILTINS

                DiagnosticError = { bg = C.crust },
                DiagnosticWarn  = { bg = C.crust },
                DiagnosticInfo  = { bg = C.crust },
                DiagnosticHint  = { bg = C.crust },
                --[[ Diagnostic colors
                DiagnosticUnderlineError         = { bg = "#30212c"},
                DiagnosticUnderlineWarn          = { bg = "#312e2d"},
                DiagnosticUnderlineInfo          = { bg = "#202d36"},
                DiagnosticUnderlineHint          = { bg = "#222e33"},
                --]]
                DiagnosticUnderlineError         = { bg = "#251b25" },
                DiagnosticUnderlineWarn          = { bg = "#28262a" },
                DiagnosticUnderlineInfo          = { bg = "#1a232b" },
                DiagnosticUnderlineHint          = { bg = "#1b2329" },
                ActiveLineNumber                 = { fg = C.subtext0 },
                Boolean                          = { fg = C.peach },
                borderStyle                      = { fg = C.crust, bg = C.crust },
                Character                        = { fg = C.green },
                -- ColorColumn                   = { bg = colors.},
                Comment                          = { fg = C.surface2 },
                Conceal                          = { link = "NonText" },
                Conditional                      = { fg = C.sky },
                Constant                         = { fg = C.peach },
                CurSearch                        = { fg = C.crust, bg = C.red },
                -- CursorColumn                  = { bg = colors.},
                -- Cursor                           = { fg = colors.crust, bg = colors.red },
                CursorLine                       = { bg = C.none },
                CursorLineNr                     = { fg = ivory },
                Define                           = { fg = C.pink },
                Directory                        = { fg = ivory },
                -- EndOfBuffer                   = { fg = colors.},
                Error                            = { fg = C.red },
                ErrorMsg                         = { fg = C.red },
                FloatBorder                      = { fg = C.mantle, bg = C.mantle },
                FloatTitle                       = { fg = C.red, bg = C.mantle },
                -- FoldColumn                    = {},
                FoldColumn                       = { link = "NonText" },
                Folded                           = { link = "Visual" },
                Function                         = { fg = ivory },
                String                           = { fg = C.green, bg = C.crust },
                GitSignsAdd                      = { fg = C.yellow, bg = C.crust },
                GitSignsChange                   = { fg = C.yellow, bg = C.crust },
                GitSignsCurrentLineBlame         = { link = "NormalFloat" },
                GitSignsDelete                   = { bg = C.crust },
                GitSignsUntracked                = { fg = "#7c7157", bg = C.crust },
                Identifier                       = { fg = C.flamingo },
                Include                          = { fg = C.mauve },
                IncSearch                        = { link = "CurSearch" },
                Keyword                          = { fg = C.yellow },
                Label                            = { fg = C.sky },
                LineNr                           = { link = "NonText" },
                Macro                            = { fg = C.mauve },
                MatchParen                       = { fg = C.red, bg = C.surface0, bold = true },
                NonText                          = { fg = C.surface0 },
                Normal                           = { bg = C.crust },
                NormalFloat                      = { bg = C.mantle },
                NormalNC                         = { link = "Normal" },
                Number                           = { fg = C.peach },
                Pmenu                            = { bg = C.crust },
                -- PmenuSbar                     = { bg = colors.},
                PmenuSel                         = { link = "Visual" },
                -- PmenuThumb                    = { bg = colors.},
                PreCondit                        = { link = "PreProc" },
                PreProc                          = { fg = C.pink },
                Question                         = { fg = C.teal },
                Repeat                           = { link = "Conditional" },
                -- Search                        = { fg = colors., bg = colors.},
                SignColumn                       = { link = "NonText" },
                SpecialComment                   = { link = "Special" },
                Special                          = { fg = C.pink },
                SpecialKey                       = { link = "NonText" },
                SpellBad                         = { sp = C.red, underline = true },
                SpellCap                         = { sp = C.yellow, underline = true },
                SpellLocal                       = { sp = C.blue, underline = true },
                SpellRare                        = { sp = C.green, underline = true },
                Statement                        = { fg = C.red },
                -- StatusLine                    = { fg = colors., bg = colors.},
                StorageClass                     = { fg = C.teal },
                Structure                        = { fg = C.teal },
                -- Substitute                    = { fg = colors., bg = colors., bold = true },
                Title                            = { fg = C.pink },
                -- Todo                          = { fg = colors., bold = true, italic = true },
                TSDefinitionUsage                = { bg = C.surface0 },
                TypeDef                          = { link = "Type" },
                Type                             = { link = "Keyword" },
                -- Underlined                    = { fg = colors., underline = true },
                VertSplit                        = { link = "NonText" },
                Visual                           = { fg = C.none, bg = C.none, bold = true },
                -- VisualNOS                     = { fg = colors.},
                WarningMsg                       = { fg = C.yellow },
                WildMenu                         = { bg = C.mantle },
                WinSeparator                     = { link = "LineNr" },

                --------------------------------------------------------------------------------------------------------
                -- TREESITTER

                ["@annotation"]                  = { fg = C.yellow },
                ["@attribute"]                   = { fg = C.teal },
                ["@boolean"]                     = { fg = C.peach },
                ["@character"]                   = { fg = C.green },
                ["@conditional"]                 = { fg = C.sapphire, bg = "none" },
                ["@constant.builtin"]            = { fg = C.peach },
                ["@constant"]                    = { fg = C.peach },
                ["@constant.macro"]              = { fg = C.mauve },
                ["@constructor"]                 = { fg = C.sky },
                ["@error"]                       = { fg = C.red },
                ["@field"]                       = { fg = C.lavender, bg = "none" },
                ["@function"]                    = { fg = ivory },
                ["@function.macro"]              = { fg = C.teal },
                ["@function.method.call"]        = { fg = ivory, bg = "none" },
                ["@function.method"]             = { fg = ivory },
                ["@keyword.exception"]           = { fg = C.mauve },
                ["@keyword"]                     = { fg = C.yellow, bg = "none", italic = true },
                ["@keyword.function"]            = { fg = ivory, bg = "none" },
                ["@keyword.function.ruby"]       = { fg = ivory },
                ["@keyword.include"]             = { fg = C.mauve },
                ["@keyword.operator"]            = { link = "@keyword.conditional" },
                ["@keyword.return"]              = { fg = C.red, bg = "none" },
                ["@label"]                       = { fg = C.sapphire },
                -- ["@markup.emphasis"]          = { fg = colors., italic = true },
                ["@markup"]                      = { fg = C.text },
                -- ["@markup.heading"]           = { fg = colors., bold = true },
                -- ["@markup.link"]              = { fg = colors., bold = true },
                ["@markup.link.url"]             = { fg = C.teal, italic = true },
                ["@markup.list"]                 = { fg = C.pink },
                ["@markup.raw"]                  = { fg = C.teal },
                ["@markup.strong"]               = { fg = C.maroon, bold = true },
                ["@markup.underline"]            = { fg = C.peach },
                ["@method"]                      = { fg = ivory, bg = "none" },
                ["@namespace"]                   = { fg = ivory, bg = "none" },
                ["@number.float"]                = { link = "Number" },
                ["@number"]                      = { link = "Number" },
                -- ["@parameter.reference"]      = { fg = colors.},
                ["@punctuation.bracket"]         = { link = "Comment" },
                ["@punctuation.delimiter"]       = { link = "Comment" },
                ["@string.escape"]               = { fg = C.pink },
                ["@string"]                      = { fg = C.green },
                ["@string.regexp"]               = { fg = C.peach },
                ["@string.special.symbol"]       = { fg = C.flamingo },
                ["@string.special.url"]          = { fg = C.mauve },
                ["@string.special.url.comment"]  = { fg = C.mauve },
                ["@string.special.url.html"]     = { fg = C.mauve },
                ["@structure"]                   = { fg = C.teal },
                ["@tag.attribute"]               = { fg = C.teal },
                ["@tag.delimiter"]               = { fg = C.sky },
                ["@tag"]                         = { fg = C.red },
                ["@type.builtin"]                = { fg = C.yellow },
                ["@type"]                        = { fg = C.yellow },
                ["@type.qualifier"]              = { fg = C.mauve },
                ["@variable.builtin"]            = { fg = C.red, bg = "none" },
                ["@variable"]                    = { fg = C.red, bg = "none" },
                ["@variable.member"]             = { fg = ivory, bg = "none" },
                ["@variable.parameter"]          = { fg = C.red },

                --------------------------------------------------------------------------------------------------------
                -- SEMANTIC TOKENS

                ["@module"]                      = { fg = C.yellow },
                ["@operator"]                    = { fg = C.sapphire },
                ["@property"]                    = { fg = C.lavender },
                ["@lsp.type.keyword"]            = { fg = C.rosewater, bg = "none" },
                ["@function.builtin"]            = { fg = C.peach },
                ["@keyword.conditional"]         = { fg = C.sapphire, italic = true },
                ["@keyword.repeat"]              = { fg = C.sapphire, italic = true },
                ["@class"]                       = { fg = C.teal },
                ["@decorator"]                   = { fg = C.peach },
                ["@enum"]                        = { fg = C.peach },
                ["@enumMember"]                  = { fg = C.peach },
                ["@event"]                       = { fg = C.yellow },
                ["@interface"]                   = { fg = C.teal },
                ["@lsp.type.class"]              = { fg = C.teal },
                ["@lsp.type.decorator"]          = { fg = C.peach },
                ["@lsp.type.enum"]               = { fg = C.peach },
                ["@lsp.type.enumMember"]         = { fg = C.peach },
                ["@lsp.type.function"]           = { fg = ivory },
                ["@lsp.type.interface"]          = { fg = C.teal },
                ["@lsp.type.macro"]              = { fg = C.mauve },
                ["@lsp.type.method"]             = { fg = ivory },
                ["@lsp.type.namespace"]          = { fg = C.yellow },
                ["@lsp.type.parameter"]          = { fg = C.maroon },
                ["@lsp.type.property"]           = { fg = C.lavender },
                ["@lsp.type.struct"]             = { fg = C.teal },
                ["@lsp.type.type"]               = { link = "Comment" },
                ["@lsp.type.variable"]           = { fg = C.red },
                ["@modifier"]                    = { fg = C.mauve },
                ["@regexp"]                      = { fg = C.peach },
                ["@struct"]                      = { fg = C.teal },
                ["@typeParameter"]               = { fg = C.yellow },

                --------------------------------------------------------------------------------------------------------
                -- BLINK

                BlinkCmpKindClass                = { link = "@lsp.type.class" },
                BlinkCmpKindColor                = { link = "@define" },
                BlinkCmpKindConstant             = { link = "@constant" },
                BlinkCmpKindConstructor          = { link = "@constructor" },
                BlinkCmpKindEnum                 = { link = "@lsp.type.enum" },
                BlinkCmpKindEnumMember           = { link = "@lsp.type.enumMember" },
                BlinkCmpKindEvent                = { link = "@lsp.type.event" },
                BlinkCmpKindField                = { link = "@lsp.type.property" },
                BlinkCmpKindFile                 = { fg = C.teal },
                BlinkCmpKindFolder               = { fg = ivory },
                BlinkCmpKindFunction             = { link = "@lsp.type.function" },
                BlinkCmpKindInterface            = { link = "@lsp.type.interface" },
                BlinkCmpKindKeyword              = { link = "@lsp.type.keyword" },
                BlinkCmpKindMethod               = { link = "@lsp.type.method" },
                BlinkCmpKindModule               = { link = "@module" },
                BlinkCmpKindOperator             = { link = "@lsp.type.operator" },
                BlinkCmpKindProperty             = { link = "@lsp.type.property" },
                BlinkCmpKindReference            = { link = "@function.call" },
                BlinkCmpKindSnippet              = { link = "@keyword" },
                BlinkCmpKindStruct               = { link = "@lsp.type.struct" },
                BlinkCmpKindText                 = { link = "@comment" },
                BlinkCmpKindTypeParameter        = { link = "@lsp.type.typeParameter" },
                BlinkCmpKindUnit                 = { link = "@module" },
                BlinkCmpKindValue                = { link = "@lsp.type.enumMember" },
                BlinkCmpKindVariable             = { link = "@lsp.type.type" },
                BlinkCmpAbbrDeprecated           = { link = "DiagnosticDeprecated" },
                BlinkCmpLabelDescription         = { link = "Comment" },
                BlinkCmpLabelDetail              = { link = "Comment" },
                BlinkCmpLabelMatch               = { link = "Visual" },
                BlinkCmpMenuBorder               = { fg = C.crust, bg = C.crust },
                BlinkCmpDocBorder                = { fg = C.crust, bg = C.crust },
                BlinkCmpMenu                     = { bg = C.mantle },
                -- BlinkCmpMenu                     = { bg = "#13131E" },
                -- BlinkCmpMenu                     = { bg = "#0e0e16" },
                BlinkCmpMenuSelection            = { link = "Visual" },
                BlinkCmpSource                   = { link = "NonText" },
                BlinkCmpScrollBarThumb           = { bg = C.surface2 },
                BlinkCmpScrollBarGutter          = { bg = C.base },

                --------------------------------------------------------------------------------------------------------
                -- DROPBAR

                DropBarCurrentContext            = { link = "Visual" },
                DropBarFzfMatch                  = { link = "DiagnosticErrorMsg" },
                DropBarHover                     = { link = "Visual" },

                --------------------------------------------------------------------------------------------------------
                -- ICON UI

                DropBarIconUiIndicator           = { link = "NonText" },
                DropBarIconUiSeparator           = { link = "NonText" },
                DropBarMenuCurrentContext        = { link = "Visual" },
                DropBarMenuFloatBorder           = { link = "NormalFloat" },
                DropBarMenuHoverEntry            = { link = "Visual" },
                DropBarMenuHoverIcon             = { link = "IncSearch" },
                DropBarMenuHoverSymbol           = { link = "Visual" },
                DropBarMenuNormalFloat           = { link = "NormalFloat" },
                DropBarMenuSbar                  = { link = "NormalFloat" },
                DropBarMenuThumb                 = { link = "NormalFloat" },

                --------------------------------------------------------------------------------------------------------
                -- KIND

                DropBarKindDefault               = { link = "@text" },
                DropBarKindArray                 = { link = "@string" },
                DropBarKindBoolean               = { link = "@lsp.type.boolean" },
                DropBarKindBreakstatement        = { link = "DiagnosticError" },
                DropBarKindCall                  = { link = "@function.call" },
                DropBarKindCasestatement         = { link = "@keyword.conditional" },
                DropBarKindClass                 = { link = "@lsp.type.class" },
                DropBarKindConstant              = { link = "@constant" },
                DropBarKindConstructor           = { link = "@constructor" },
                DropBarKindContinuestatement     = { link = "@conditional" },
                DropBarKindDeclaration           = { link = "@lsp.type.type" },
                DropBarKindDelete                = { link = "DiagnosticError" },
                DropBarKindDir                   = { link = "Function" },
                DropBarKindDostatement           = { link = "@keyword" },
                DropBarKindElsestatement         = { link = "@conditional" },
                DropBarKindElement               = { link = "@variable.builtin" },
                DropBarKindEnum                  = { link = "@lsp.type.enum" },
                DropBarKindEnumMember            = { link = "@lsp.type.enumMember" },
                DropBarKindEvent                 = { link = "@lsp.type.event" },
                DropBarKindField                 = { link = "@field" },
                DropBarKindFile                  = { link = "Comment" },
                DropBarKindFolder                = { link = "Function" },
                DropBarKindForStatement          = { link = "@keyword.repeat" },
                DropBarKindFunction              = { link = "@lsp.type.function" },
                DropBarKindH1Marker              = { link = "MarkdownH1" },
                DropBarKindH2Marker              = { link = "MarkdownH2" },
                DropBarKindH3Marker              = { link = "MarkdownH3" },
                DropBarKindH4Marker              = { link = "MarkdownH4" },
                DropBarKindH5Marker              = { link = "MarkdownH5" },
                DropBarKindH6Marker              = { link = "MarkdownH6" },
                DropBarKindIdentifier            = { link = "Identifier" },
                DropBarKindIfStatement           = { link = "@keyword.conditional" },
                DropBarKindInterface             = { link = "@lsp.type.interface" },
                DropBarKindKeyword               = { link = "@lsp.type.keyword" },
                DropBarKindList                  = { link = "@markup.list" },
                DropBarKindMacro                 = { link = "@lsp.type.macro" },
                DropBarKindMarkdownH1            = { link = "MarkdownH1" },
                DropBarKindMarkdownH2            = { link = "MarkdownH2" },
                DropBarKindMarkdownH3            = { link = "MarkdownH3" },
                DropBarKindMarkdownH4            = { link = "MarkdownH4" },
                DropBarKindMarkdownH5            = { link = "MarkdownH5" },
                DropBarKindMarkdownH6            = { link = "MarkdownH6" },
                DropBarKindMethod                = { link = "@lsp.type.method" },
                DropBarKindModule                = { link = "@module" },
                DropBarKindNamespace             = { link = "@lsp.type.namespace" },
                DropBarKindNull                  = { link = "@lsp.type.boolean" },
                DropBarKindNumber                = { link = "@lsp.type.number" },
                DropBarKindObject                = { link = "@keyword.function" },
                DropBarKindOperator              = { link = "@lsp.type.operator" },
                DropBarKindPackage               = { link = "@conditional" },
                DropBarKindPair                  = { link = "@keyword" },
                DropBarKindProperty              = { link = "@property" },
                DropBarKindReference             = { link = "@keyword" },
                DropBarKindRepeat                = { link = "@keyword.repeat" },
                DropBarKindRuleset               = { link = "@include" },
                DropBarKindScope                 = { link = "@include" },
                DropBarKindSpecifier             = { link = "@include" },
                DropBarKindStatement             = { link = "Statement" },
                DropBarKindString                = { link = "@string" },
                DropBarKindStruct                = { link = "@lsp.type.struct" },
                DropBarKindSwitchstatement       = { link = "@conditional" },
                DropBarKindTerminal              = { link = "@string" },
                DropBarKindType                  = { link = "@lsp.type.type" },
                DropBarKindTypeParameter         = { link = "@lsp.type.typeParameter" },
                DropBarKindUnit                  = { link = "@keyword" },
                DropBarKindValue                 = { link = "@text" },
                DropBarKindVariable              = { link = "@lsp.type.variable" },
                DropBarKindWhileStatement        = { link = "@keyword.repeat" },

                --------------------------------------------------------------------------------------------------------
                -- ICON KIND

                DropBarIconKindDefault           = { link = "@text" },
                DropBarIconKindArray             = { link = "@string" },
                DropBarIconKindBoolean           = { link = "@lsp.type.boolean" },
                DropBarIconKindBreakstatement    = { link = "DiagnosticError" },
                DropBarIconKindCall              = { link = "@function.call" },
                DropBarIconKindCasestatement     = { link = "@keyword.conditional" },
                DropBarIconKindClass             = { link = "@lsp.type.class" },
                DropBarIconKindConstant          = { link = "@constant" },
                DropBarIconKindConstructor       = { link = "@constructor" },
                DropBarIconKindContinuestatement = { link = "@conditional" },
                DropBarIconKindDeclaration       = { link = "@lsp.type.type" },
                DropBarIconKindDelete            = { link = "DiagnosticError" },
                DropBarIconKindDir               = { link = "Function" },
                DropBarIconKindDostatement       = { link = "@keyword" },
                DropBarIconKindElsestatement     = { link = "@conditional" },
                DropBarIconKindElement           = { link = "@variable.builtin" },
                DropBarIconKindEnum              = { link = "@lsp.type.enum" },
                DropBarIconKindEnumMember        = { link = "@lsp.type.enumMember" },
                DropBarIconKindEvent             = { link = "@lsp.type.event" },
                DropBarIconKindField             = { link = "@field" },
                DropBarIconKindFile              = { link = "Comment" },
                DropBarIconKindFolder            = { link = "Function" },
                DropBarIconKindForStatement      = { link = "@keyword.repeat" },
                DropBarIconKindFunction          = { link = "@lsp.type.function" },
                DropBarIconKindH1Marker          = { link = "MarkdownH1" },
                DropBarIconKindH2Marker          = { link = "MarkdownH2" },
                DropBarIconKindH3Marker          = { link = "MarkdownH3" },
                DropBarIconKindH4Marker          = { link = "MarkdownH4" },
                DropBarIconKindH5Marker          = { link = "MarkdownH5" },
                DropBarIconKindH6Marker          = { link = "MarkdownH6" },
                DropBarIconKindIdentifier        = { link = "Identifier" },
                DropBarIconKindIfStatement       = { link = "@keyword.conditional" },
                DropBarIconKindInterface         = { link = "@lsp.type.interface" },
                DropBarIconKindKeyword           = { link = "@lsp.type.keyword" },
                DropBarIconKindList              = { link = "@markup.list" },
                DropBarIconKindMacro             = { link = "@lsp.type.macro" },
                DropBarIconKindMarkdownH1        = { link = "MarkdownH1" },
                DropBarIconKindMarkdownH2        = { link = "MarkdownH2" },
                DropBarIconKindMarkdownH3        = { link = "MarkdownH3" },
                DropBarIconKindMarkdownH4        = { link = "MarkdownH4" },
                DropBarIconKindMarkdownH5        = { link = "MarkdownH5" },
                DropBarIconKindMarkdownH6        = { link = "MarkdownH6" },
                DropBarIconKindMethod            = { link = "@lsp.type.method" },
                DropBarIconKindModule            = { link = "@module" },
                DropBarIconKindNamespace         = { link = "@lsp.type.namespace" },
                DropBarIconKindNull              = { link = "@lsp.type.boolean" },
                DropBarIconKindNumber            = { link = "@lsp.type.number" },
                DropBarIconKindObject            = { link = "@keyword.function" },
                DropBarIconKindOperator          = { link = "@lsp.type.operator" },
                DropBarIconKindPackage           = { link = "@conditional" },
                DropBarIconKindPair              = { link = "@keyword" },
                DropBarIconKindProperty          = { link = "@property" },
                DropBarIconKindReference         = { link = "@keyword" },
                DropBarIconKindRepeat            = { link = "@keyword.repeat" },
                DropBarIconKindRuleset           = { link = "@include" },
                DropBarIconKindScope             = { link = "@include" },
                DropBarIconKindSpecifier         = { link = "@include" },
                DropBarIconKindStatement         = { link = "Statement" },
                DropBarIconKindString            = { link = "@string" },
                DropBarIconKindStruct            = { link = "@lsp.type.struct" },
                DropBarIconKindSwitchstatement   = { link = "@conditional" },
                DropBarIconKindTerminal          = { link = "@string" },
                DropBarIconKindType              = { link = "@lsp.type.type" },
                DropBarIconKindTypeParameter     = { link = "@lsp.type.typeParameter" },
                DropBarIconKindUnit              = { link = "@keyword" },
                DropBarIconKindValue             = { link = "@text" },
                DropBarIconKindVariable          = { link = "@lsp.type.variable" },
                DropBarIconKindWhileStatement    = { link = "@keyword.repeat" },

                --------------------------------------------------------------------------------------------------------
                -- SNACKS

                SnacksPickerTitle                = { link = "DiagnosticError" },
                SnacksPicker                     = { link = "Normal" },
                SnacksPickerBorder               = { link = "borderStyle" },
                SnacksPickerCursorLine           = { link = "TinyInlineDiagnosticVirtualTextError" },
                SnacksNotifierBorderInfo         = { link = "TinyInlineDiagnosticVirtualTextInfo" },
                SnacksNotifierBorderWarn         = { link = "TinyInlineDiagnosticVirtualTextWarn" },
                SnacksNotifierBorderError        = { link = "TinyInlineDiagnosticVirtualTextError" },
                SnacksNotifierFooterInfo         = { link = "TinyInlineDiagnosticVirtualTextInfo" },
                SnacksNotifierFooterWarn         = { link = "TinyInlineDiagnosticVirtualTextWarn" },
                SnacksNotifierFooterError        = { link = "TinyInlineDiagnosticVirtualTextError" },
                SnacksNotifierTitleInfo          = { link = "TinyInlineDiagnosticVirtualTextInfo" },
                SnacksNotifierTitleWarn          = { link = "TinyInlineDiagnosticVirtualTextWarn" },
                SnacksNotifierTitleError         = { link = "TinyInlineDiagnosticVirtualTextError" },
                SnacksNotifierInfo               = { link = "TinyInlineDiagnosticVirtualTextInfo" },
                SnacksNotifierWarn               = { link = "TinyInlineDiagnosticVirtualTextWarn" },
                SnacksNotifierError              = { link = "TinyInlineDiagnosticVirtualTextError" },

                --------------------------------------------------------------------------------------------------------
                -- NEOTREE

                NeoTreeCursorLine                = { link = "Visual" },
                NeoTreeFileName                  = { link = "NonText" },
                NeoTreeGitModified               = { link = "GitSignsDelete" },
                NeoTreeGitUntracked              = { link = "GitsignsUntracked" },
                NeoTreeNormal                    = { link = "Normal" },
                NeoTreeNormalNC                  = { link = "NormalNC" },
                NeoTreeVertSplit                 = { link = "WinSeparator" },
                NeoTreeWinSeparator              = { link = "WinSeparator" },
                NeoTreeStatsHeader               = { link = "Title" },
                NeoTreeFloatNormal               = { link = "NormalFloat" },
                NeoTreeDirectoryIcon             = { fg = ivory },
                NeoTreeDirectoryName             = { fg = ivory },
                NeoTreeFloatTitle                = { link = "Title" },
                NeoTreeTitleBar                  = { link = "IncSearch" },
                NeoTreeFloatBorder               = { link = "NormalFloat" },
                NeoTreeModified                  = { link = "Normal" },
                NeoTreeRootName                  = { link = "CursorLineNr" },

                --------------------------------------------------------------------------------------------------------
                -- TELESCOPE

                TelescopePromptCount             = { link = "Normal" },
                TelescopePromptTitle             = { link = "DiagnosticError" },
                TelescopePromptPrefix            = { link = "DiagnosticError" },
                TelescopePromptNormal            = { link = "Normal" },
                TelescopePromptBorder            = { link = "FloatBorder" },
                TelescopeResultsTitle            = { link = "DiagnosticError" },
                TelescopeResultsNormal           = { link = "NonText" },
                TelescopeResultsBorder           = { link = "FloatBorder" },
                TelescopePreviewTitle            = { link = "DiagnosticError" },
                TelescopePreviewNormal           = { link = "Normal" },
                TelescopePreviewBorder           = { link = "FloatBorder" },
                TelescopeSelection               = { link = "Visual" },
                TelescopeSelectionCaret          = { link = "Visual" },

                --------------------------------------------------------------------------------------------------------
                -- MINI-STATUSLINE

                MiniStatuslineModeNormal         = { bg = C.text },
                MiniStatuslineModeInsert         = { bg = C.text },
                MiniStatuslineModeVisual         = { bg = C.text },
                MiniStatuslineModeOther          = { bg = C.text },
                MiniStatuslineModeReplace        = { bg = C.text },
                MiniStatuslineModeCommand        = { bg = C.text },
                MiniStatuslineDevinfo            = { bg = C.crust },
                MiniStatuslineFileinfo           = { bg = C.crust },
                MiniStatuslineFilename           = { fg = C.surface0, bg = C.crust },
                MiniStatuslineInactive           = { fg = C.text, bg = C.crust },

                --------------------------------------------------------------------------------------------------------
                -- NOICE

                NoiceCmdline                     = { link = "NormalFloat" },
                NoiceConfirm                     = { link = "NormalFloat" },
                NoiceConfirmBorder               = { link = "FloatBorder" },
                NoiceCmdlinePopup                = { link = "NormalFloat" },
                NoiceCmdlinePopupBorder          = { link = "FloatBorder" },
                NoiceCmdlineIcon                 = { link = "Title" },

                --------------------------------------------------------------------------------------------------------
                -- MISC

                FoldMark                         = { link = "TinyInlineDiagnosticVirtualTextError" },
                IBLScope                         = { fg = ivory },
                SnacksIndentScope                = { fg = ivory },
                LspInlayHint                     = { fg = C.overlay0, bg = C.base },
                OutlineCurrent                   = { link = "Visual" },
                OutlineDetails                   = { link = "NonText" },
                OutlineFoldMarker                = { link = "NonText" },
                FlashBackdrop                    = { link = "NonText" },
                FlashMatch                       = { link = "LspInlayHint" },
                FlashCurrent                     = { link = "LspInlayHint" },
                FlashLabel                       = { link = "DiagnosticError" },
                MiniFilesDirectory               = { fg = ivory },
                MiniFilesFile                    = { link = "Comment" },
                MiniFilesCursorLine              = { link = "Visual" },
                MiniFilesBorder                  = { link = "Normal" },
                -- LightBulbSign                    = { fg = spark },
                TreesitterContext                = { bg = C.mantle, bold = true },
                LspReferenceText                 = { link = "Visual" },
                -- LspReferenceText                 = { link = "LspInlayHint" },
                LspReferenceWrite                = { link = "LspReferenceText" },
                LspReferenceRead                 = { link = "LspReferenceWrite" },
                MiniHipatternsNote               = { fg = C.crust, bg = C.sky, italic = true, bold = true },
                MiniHipatternsTodo               = { fg = C.crust, bg = C.teal, italic = true, bold = true },
                MiniHipatternsHack               = { fg = C.crust, bg = C.yellow, italic = true, bold = true },
                MiniHipatternsFixme              = { fg = C.crust, bg = C.red, italic = true, bold = true },
                --[[ Treesitter Context highlights
                TreesitterContextLineNumber       = { link = "LineNr" },
                TreesitterContext                 = { link = "NormalFloat" },
                TreesitterContextBottom           = { sp = ivory },
                TreesitterContextLineNumberBottom = { sp = ivory },
                TreesitterContextLineNumber      = { link = "Normal" },
                --]]

        }
end

return {
        "catppuccin/nvim",
        lazy     = false,
        name     = "catppuccin",
        priority = 1000,
        config   = function()
                require("catppuccin").setup({
                        compile_path           = vim.fn.stdpath"cache" .. "/catppuccin",
                        flavour                = "mocha",
                        transparent_background = false,
                        show_end_of_buffer     = true,
                        term_colors            = true,
                        background             = { light = "latte", dark = "mocha" },
                        dim_inactive           = { enabled = false, shade = "dark", percentage = 0.15 },
                        no_italic              = true,
                        no_bold                = false,
                        no_underline           = false,
                        color_overrides        = {
                                mocha = {
                                        crust  = "#000000",
                                        mantle = "#000000",
                                },
                        },
                        custom_highlights      = customCol,
                        default_integrations   = true,
                        integrations           = {
                                blink_cmp        = true,
                                cmp              = true,
                                dap              = true,
                                dap_ui           = true,
                                lsp_saga         = true,
                                dashboard        = true,
                                dropbar          = {
                                        enabled    = true,
                                        color_mode = true,
                                },
                                gitsigns         = true,
                                indent_blankline = {
                                        enabled     = true,
                                        scope_color = "text",
                                },
                                mason            = true,
                                markdown         = true,
                                render_markdown  = true,
                                mini             = true,
                                native_lsp       = {
                                        enabled    = true,
                                        underlines = {
                                                errors      = { "nocombine" },
                                                hints       = { "nocombine" },
                                                warnings    = { "nocombine" },
                                                information = { "nocombine" },
                                                ok          = { "nocombine" },
                                        },
                                },
                                telescope        = true,
                                notify           = true,
                                navic            = { enabled = true, custom_bg = "lualine" },
                                neotest          = true,
                                neotree          = true,
                                noice            = true,
                                semantic_tokens  = true,
                                treesitter       = true,
                                ufo              = true,
                                which_key        = true,
                        },
                })
        end,
}
